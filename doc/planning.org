* classes
** Searchable
- vector<Search_Node> get_children
- string get_state(current_depth) //takes current_depth so the children can be properly tagged
- int run_heuristic()
*** Search_Node
- Searchable self
- Search_Node parent
- string move
*** Cube
- Cube rotate(slice, axis, direction)
**** rotations
- rotate(move)
Front: 0, Back: 1, Right: 4, Left: 5, Top: 3, Bottom: 2

all sections on an individual face are indexed 'upper left' to 'lower right'
looking along the axis of the cube in the positive direction

-----X
|\
| \
Y  Z

slices are top to bottom, left to right looking along the axis in the positive direction

store as a 1d array of length 6*n*n where an individual face section is 
indexed at n*n*face#+(y*n)+x
|---+---+---|
| 0 | 1 | 2 |
|---+---+---|
| 3 | 4 | 5 |
|---+---+---|
| 6 | 7 | 8 | 
|---+---+---|  

| 0,0 | 1,0 | 2,0 |
|-----+-----+-----|
| 0,1 | 1,1 | 2,1 |
|-----+-----+-----|
| 0,2 | 1,2 | 2,2 |


|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   | 27 | 28 | 29 |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   | 30 | 31 | 32 |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   | 33 | 34 | 35 |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   |    |    |    |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
| 0 | 1 | 2 |   | 36 | 37 | 38 |   |  9 | 10 | 11 |   | 45 | 46 | 47 |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
| 3 | 4 | 5 |   | 39 | 40 | 41 |   | 12 | 13 | 14 |   | 48 | 49 | 50 |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
| 6 | 7 | 8 |   | 42 | 43 | 44 |   | 15 | 16 | 17 |   | 51 | 52 | 53 |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   |    |    |    |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   | 18 | 19 | 20 |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   | 21 | 22 | 23 |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
|   |   |   |   | 24 | 25 | 26 |   |    |    |    |   |    |    |    |
|---+---+---+---+----+----+----+---+----+----+----+---+----+----+----|
                            
to_different(v) = {(n-1)-v}
to_same(v, size) = {v}
| axis | direction | from face | to face | to x                 | to y                 |
|------+-----------+-----------+---------+----------------------+----------------------|
| X    | Cw        |         1 |       5 | to_same              | to_same              |
| X    | CW        |         4 |       1 | to_same              | to_different         |
| X    | CW        |         5 |       0 | to_same              | to_different         |
| X    | CW        |         0 |       4 | to_same              | to_same              |
|------+-----------+-----------+---------+----------------------+----------------------|
| X    | CCW       |         1 |       4 | to_same              | different            |
| X    | CCW       |         4 |       0 | same                 | same                 |
| X    | CCW       |         5 |       1 | same                 | same                 |
| X    | CCW       |         0 |       5 | same                 | different            |
|------+-----------+-----------+---------+----------------------+----------------------|
|------+-----------+-----------+---------+----------------------+----------------------|
| Y    | Cw        |         0 |       3 | different            | same                 |
| Y    | CW        |         1 |       2 | different            | same                 |
| Y    | CW        |         2 |       0 | same                 | same                 |
| Y    | CW        |         3 |       1 | same                 | same                 |
|------+-----------+-----------+---------+----------------------+----------------------|
| Y    | CCW       |         0 |       2 | same                 | same                 |
| Y    | CCW       |         1 |       3 | same                 | same                 |
| Y    | CCW       |         2 |       1 | different            | same                 |
| Y    | CCW       |         3 |       0 | different            | same                 |
|------+-----------+-----------+---------+----------------------+----------------------|
|------+-----------+-----------+---------+----------------------+----------------------|
| Z    | Cw        |         2 |       4 | from_y               | to_different(from_x) |
| Z    | CW        |         3 |       5 | from_y               | to_different(from_x) |
| Z    | CW        |         4 |       3 | to_different(from_y) | to_different(from_x) |
| Z    | CW        |         5 |       2 | to_different(from_y) | to_different(from_x) |
|------+-----------+-----------+---------+----------------------+----------------------|
| Z    | CCW       |         2 |       5 | to_different(from_y) | to_different(from_x) |
| Z    | CCW       |         3 |       4 | to_different(from_y) | to_different(from_x) |
| Z    | CCW       |         4 |       2 | to_different(from_y) | from_x               |
| Z    | CCW       |         5 |       3 | to_different(from_y) | from_x               |
|------+-----------+-----------+---------+----------------------+----------------------|

general rotation pseudo-code:

identity(value, _) {
 return value
}

face_switch(value, n) {
 return n-1-value
}

rot_X(face, slice, axis, direction) {
  to_face = {1->5, 4->1, 5->0, 0->4}
  x_func
  y_func
  if ()
}

rotate(face, slice, axis, direction) {
  temp_cube
  switch(axis) {
    X:
      if ()
  }
}

** Search
- Search_Node find_path(Searchable from, Searchable goal)
** Search
- find_goal(Searchable, state)
*** A*
heuristic: how far are my reds from the red face
*** BFS

* Definitions
move: a string defining a move Face, slice, dir. eg "0CCW2" or "B1CL"
state: a string defining the current state, for example a 2x2 solved cube might look like "RRRRBBBBGGGGOOOOYYYYWWWW"
       the string would be length 6*n*n in the order F Ba L R T Bo
(binary encode both of those as small as possible)
* requirements 
https://learn.unbc.ca/bbcswebdav/pid-326781-dt-content-rid-1413526_1/courses/CPSC371.201701.10178/CPSC371%20-%20Project%20-%20Phase%201.pdf
